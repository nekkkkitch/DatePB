// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Profiler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfilerClient is the client API for Profiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilerClient interface {
	ChangeName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Status, error)
	ChangeDesctipion(ctx context.Context, in *Description, opts ...grpc.CallOption) (*Status, error)
	ChangeAge(ctx context.Context, in *Age, opts ...grpc.CallOption) (*Status, error)
	ChangeTown(ctx context.Context, in *Town, opts ...grpc.CallOption) (*Status, error)
	UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Status, error)
	ChangeHobbies(ctx context.Context, in *Hobbies, opts ...grpc.CallOption) (*Status, error)
	UploadPhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Status, error)
	DeletePhoto(ctx context.Context, in *PhotoID, opts ...grpc.CallOption) (*Status, error)
	ChangePreferredAge(ctx context.Context, in *AgePrefs, opts ...grpc.CallOption) (*Status, error)
	ChangePreferredRadius(ctx context.Context, in *Radius, opts ...grpc.CallOption) (*Status, error)
}

type profilerClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilerClient(cc grpc.ClientConnInterface) ProfilerClient {
	return &profilerClient{cc}
}

func (c *profilerClient) ChangeName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/ChangeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) ChangeDesctipion(ctx context.Context, in *Description, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/ChangeDesctipion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) ChangeAge(ctx context.Context, in *Age, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/ChangeAge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) ChangeTown(ctx context.Context, in *Town, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/ChangeTown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/UpdateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) ChangeHobbies(ctx context.Context, in *Hobbies, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/ChangeHobbies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) UploadPhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/UploadPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) DeletePhoto(ctx context.Context, in *PhotoID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/DeletePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) ChangePreferredAge(ctx context.Context, in *AgePrefs, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/ChangePreferredAge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerClient) ChangePreferredRadius(ctx context.Context, in *Radius, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Profiler.Profiler/ChangePreferredRadius", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilerServer is the server API for Profiler service.
// All implementations must embed UnimplementedProfilerServer
// for forward compatibility
type ProfilerServer interface {
	ChangeName(context.Context, *Name) (*Status, error)
	ChangeDesctipion(context.Context, *Description) (*Status, error)
	ChangeAge(context.Context, *Age) (*Status, error)
	ChangeTown(context.Context, *Town) (*Status, error)
	UpdateLocation(context.Context, *Location) (*Status, error)
	ChangeHobbies(context.Context, *Hobbies) (*Status, error)
	UploadPhoto(context.Context, *Photo) (*Status, error)
	DeletePhoto(context.Context, *PhotoID) (*Status, error)
	ChangePreferredAge(context.Context, *AgePrefs) (*Status, error)
	ChangePreferredRadius(context.Context, *Radius) (*Status, error)
	mustEmbedUnimplementedProfilerServer()
}

// UnimplementedProfilerServer must be embedded to have forward compatible implementations.
type UnimplementedProfilerServer struct {
}

func (UnimplementedProfilerServer) ChangeName(context.Context, *Name) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeName not implemented")
}
func (UnimplementedProfilerServer) ChangeDesctipion(context.Context, *Description) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDesctipion not implemented")
}
func (UnimplementedProfilerServer) ChangeAge(context.Context, *Age) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAge not implemented")
}
func (UnimplementedProfilerServer) ChangeTown(context.Context, *Town) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTown not implemented")
}
func (UnimplementedProfilerServer) UpdateLocation(context.Context, *Location) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedProfilerServer) ChangeHobbies(context.Context, *Hobbies) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeHobbies not implemented")
}
func (UnimplementedProfilerServer) UploadPhoto(context.Context, *Photo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPhoto not implemented")
}
func (UnimplementedProfilerServer) DeletePhoto(context.Context, *PhotoID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedProfilerServer) ChangePreferredAge(context.Context, *AgePrefs) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePreferredAge not implemented")
}
func (UnimplementedProfilerServer) ChangePreferredRadius(context.Context, *Radius) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePreferredRadius not implemented")
}
func (UnimplementedProfilerServer) mustEmbedUnimplementedProfilerServer() {}

// UnsafeProfilerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilerServer will
// result in compilation errors.
type UnsafeProfilerServer interface {
	mustEmbedUnimplementedProfilerServer()
}

func RegisterProfilerServer(s grpc.ServiceRegistrar, srv ProfilerServer) {
	s.RegisterService(&Profiler_ServiceDesc, srv)
}

func _Profiler_ChangeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).ChangeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/ChangeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).ChangeName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_ChangeDesctipion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Description)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).ChangeDesctipion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/ChangeDesctipion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).ChangeDesctipion(ctx, req.(*Description))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_ChangeAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Age)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).ChangeAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/ChangeAge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).ChangeAge(ctx, req.(*Age))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_ChangeTown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Town)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).ChangeTown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/ChangeTown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).ChangeTown(ctx, req.(*Town))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).UpdateLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_ChangeHobbies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hobbies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).ChangeHobbies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/ChangeHobbies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).ChangeHobbies(ctx, req.(*Hobbies))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_UploadPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).UploadPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/UploadPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).UploadPhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/DeletePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).DeletePhoto(ctx, req.(*PhotoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_ChangePreferredAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgePrefs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).ChangePreferredAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/ChangePreferredAge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).ChangePreferredAge(ctx, req.(*AgePrefs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiler_ChangePreferredRadius_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Radius)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServer).ChangePreferredRadius(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profiler.Profiler/ChangePreferredRadius",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServer).ChangePreferredRadius(ctx, req.(*Radius))
	}
	return interceptor(ctx, in, info, handler)
}

// Profiler_ServiceDesc is the grpc.ServiceDesc for Profiler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profiler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Profiler.Profiler",
	HandlerType: (*ProfilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeName",
			Handler:    _Profiler_ChangeName_Handler,
		},
		{
			MethodName: "ChangeDesctipion",
			Handler:    _Profiler_ChangeDesctipion_Handler,
		},
		{
			MethodName: "ChangeAge",
			Handler:    _Profiler_ChangeAge_Handler,
		},
		{
			MethodName: "ChangeTown",
			Handler:    _Profiler_ChangeTown_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _Profiler_UpdateLocation_Handler,
		},
		{
			MethodName: "ChangeHobbies",
			Handler:    _Profiler_ChangeHobbies_Handler,
		},
		{
			MethodName: "UploadPhoto",
			Handler:    _Profiler_UploadPhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _Profiler_DeletePhoto_Handler,
		},
		{
			MethodName: "ChangePreferredAge",
			Handler:    _Profiler_ChangePreferredAge_Handler,
		},
		{
			MethodName: "ChangePreferredRadius",
			Handler:    _Profiler_ChangePreferredRadius_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profiler.proto",
}
